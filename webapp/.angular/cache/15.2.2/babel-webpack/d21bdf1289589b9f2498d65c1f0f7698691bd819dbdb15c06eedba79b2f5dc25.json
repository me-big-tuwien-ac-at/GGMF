{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { ConceptualModelParameter } from '../model/conceptual-model-parameter';\nimport { ModelParameter } from '../model/conceptual-model-parameter';\nimport { ModulariseConceptualModelDTO } from '../dto/modularise-conceptual-model-dto';\nimport { ModularisationDataService } from \"../modularisation/modularisation-data.service\";\nimport { MatTableDataSource } from '@angular/material/table';\nimport { saveAs } from 'file-saver';\nimport { SpinnerService } from '../shared/spinner.service';\nimport { AppConfig } from '../app.config.service';\nimport { ObjectiveData } from '../model/objective-data.model';\nimport { GeneticAlgorithmSelectionParameter } from '../model/genetic-algorithm-selection-parameter.model';\nvar ModularisationComponent = /** @class */function () {\n  function ModularisationComponent(modularisationDataService, spinnerService) {\n    this.modularisationDataService = modularisationDataService;\n    this.modularisationFileToUpload = null;\n    this.spinnerService = spinnerService;\n    this.geneticAlgorithmSelections = AppConfig.settings.geneticAlgorithmSelections;\n    this.selectedGeneticAlgorithmSelection = this.geneticAlgorithmSelections[0];\n    this.edgeWeightDataSource = new MatTableDataSource(AppConfig.settings.edgeWeights);\n    this.displayedEdgeWeightColumns = AppConfig.settings.displayedEdgeWeightColumns;\n    this.displayedObjectiveColumns = AppConfig.settings.displayedObjectiveColumns;\n    this.isUseWeightedSumMethod = AppConfig.settings.isUseWeightedSumMethod;\n    this.objectivesDataSource = AppConfig.settings.objectives;\n    this.metaModels = AppConfig.settings.metaModels;\n    this.selectedMetaModel = this.metaModels[AppConfig.settings.uiSettings.selectedConceptualModelIndex];\n    this.selectedConceptualModel = this.selectedMetaModel.conceptualModels[0];\n    this.isADOxxSelected = this.isADOxxFileSelected();\n    this.geneticAlgorithmParameter = AppConfig.settings.initialGeneticAlgorithmParameter;\n    this.paretoSetParameter = AppConfig.settings.initialParetoSetParameter;\n    this.mutationWeightParameter = AppConfig.settings.initialMutationWeightParameter;\n    this.isUseCustomEdgeWeights = AppConfig.settings.uiSettings.isUseCustomEdgeWeights;\n    this.isShowEdgeWeightTable = AppConfig.settings.uiSettings.isShowEdgeWeightTable;\n    this.numberOfElementsPerModule = AppConfig.settings.numberOfElementsPerModule;\n    this.isShowObjectivesTable = AppConfig.settings.uiSettings.isShowObjectivesTable;\n    this.tooltips = AppConfig.settings.tooltips;\n    this.selectedSingleObjectiveOffspringSelectorIndex = 0;\n    this.selectedMultiObjectiveOffspringSelectorIndex = 0;\n    this.selectedSingleObjectiveSurvivorSelectorIndex = 0;\n    this.selectedMultiObjectiveSurvivorSelectorIndex = 0;\n    this.selectedCrossoverIndex = 0;\n    this.selectedMutationIndex = 0;\n  }\n  ModularisationComponent.prototype.ngOnInit = function () {};\n  ModularisationComponent.prototype.offspringSelection = function () {\n    if (this.isUseWeightedSumMethod) {\n      return this.selectedGeneticAlgorithmSelection.singleObjectiveOffspringSelector;\n    }\n    return this.selectedGeneticAlgorithmSelection.multiObjectiveOffspringSelector;\n  };\n  ModularisationComponent.prototype.survivorSelection = function () {\n    if (this.isUseWeightedSumMethod) {\n      return this.selectedGeneticAlgorithmSelection.singleObjectiveSurvivorSelector;\n    }\n    return this.selectedGeneticAlgorithmSelection.multiObjectiveSurvivorSelector;\n  };\n  ModularisationComponent.prototype.onChangeGeneticAlgorithmSelection = function (selectedIndex) {\n    this.selectedGeneticAlgorithmSelection = this.geneticAlgorithmSelections[selectedIndex];\n    this.selectedCrossoverIndex = 0;\n    this.selectedMutationIndex = 0;\n  };\n  ModularisationComponent.prototype.onChangeOffspringSelection = function (selectedIndex) {\n    if (this.isUseWeightedSumMethod) {\n      this.selectedSingleObjectiveOffspringSelectorIndex = selectedIndex;\n    } else {\n      this.selectedMultiObjectiveOffspringSelectorIndex = selectedIndex;\n    }\n  };\n  ModularisationComponent.prototype.onChangeSurvivorSelection = function (selectedIndex) {\n    if (this.isUseWeightedSumMethod) {\n      this.selectedSingleObjectiveSurvivorSelectorIndex = selectedIndex;\n    } else {\n      this.selectedMultiObjectiveSurvivorSelectorIndex = selectedIndex;\n    }\n  };\n  ModularisationComponent.prototype.onChangeCrossoverSelection = function (selectedIndex) {\n    this.selectedCrossoverIndex = selectedIndex;\n  };\n  ModularisationComponent.prototype.onChangeMutationSelection = function (selectedIndex) {\n    this.selectedMutationIndex = selectedIndex;\n  };\n  ModularisationComponent.prototype.onChangeMetaModel = function (selectedIndex) {\n    this.selectedMetaModel = this.metaModels[selectedIndex];\n    this.onChangeConceptualModel(0);\n    this.isADOxxSelected = this.isADOxxFileSelected();\n  };\n  ModularisationComponent.prototype.onChangeConceptualModel = function (selectedIndex) {\n    this.selectedConceptualModel = this.selectedMetaModel.conceptualModels[selectedIndex];\n  };\n  ModularisationComponent.prototype.hideEdgeWeightTable = function (showEdgeWeightButton) {\n    showEdgeWeightButton.textContent = this.isShowEdgeWeightTable ? \"Show\" : \"Hide\";\n    this.isShowEdgeWeightTable = !this.isShowEdgeWeightTable;\n  };\n  ModularisationComponent.prototype.deleteEdgeWeight = function (button, index) {\n    var edgeWeights = this.edgeWeightDataSource.data;\n    if (edgeWeights.length > 1) {\n      edgeWeights.splice(index, 1);\n      this.edgeWeightDataSource.data = edgeWeights;\n    }\n  };\n  ModularisationComponent.prototype.addEdgeWeight = function (event, edgeWeightName, edgeWeight) {\n    if (edgeWeightName.length > 0 && edgeWeight.length > 0) {\n      var edgeWeights = this.edgeWeightDataSource.data;\n      var newEdgeweight = {\n        name: edgeWeightName,\n        weight: parseInt(edgeWeight)\n      };\n      edgeWeights.push(newEdgeweight);\n      this.edgeWeightDataSource.data = edgeWeights;\n    }\n  };\n  ModularisationComponent.prototype.hideObjectivesTable = function (showObjectivesButton) {\n    showObjectivesButton.textContent = this.isShowObjectivesTable ? \"Show\" : \"Hide\";\n    this.isShowObjectivesTable = !this.isShowObjectivesTable;\n  };\n  ModularisationComponent.prototype.checkNumberOfObjectivesSelected = function (checkbox, index) {\n    var selectedObjective = this.objectivesDataSource.filter(function (objective) {\n      return objective.isSelected;\n    });\n    if (selectedObjective.length == 0) {\n      checkbox.checked = true;\n    }\n  };\n  ModularisationComponent.prototype.handleModularisationFileInput = function (files) {\n    this.modularisationFileToUpload = files.item(0);\n  };\n  ModularisationComponent.prototype.isModelTypeRequired = function () {\n    if (this.modularisationFileToUpload == null) {\n      return true;\n    }\n    var fileExtension = this.getModularisationFileExtension();\n    return fileExtension != \"graphml\";\n  };\n  ModularisationComponent.prototype.isADOxxFileSelected = function () {\n    var metaModelType = this.getSelectedMetaModel();\n    return metaModelType == ModelParameter.MetaModelType.ADOXX;\n  };\n  ModularisationComponent.prototype.getModularisationFileExtension = function () {\n    var fileName = this.modularisationFileToUpload.name;\n    return fileName.split('.').pop();\n  };\n  ModularisationComponent.prototype.modularise = function () {\n    var _this = this;\n    var chromosomeEncoding = this.selectedGeneticAlgorithmSelection.chromosomeEncoding;\n    var offspringSelector;\n    var survivorSelector;\n    if (this.isUseWeightedSumMethod) {\n      // Single objective\n      offspringSelector = this.selectedGeneticAlgorithmSelection.singleObjectiveOffspringSelector[this.selectedSingleObjectiveOffspringSelectorIndex];\n      survivorSelector = this.selectedGeneticAlgorithmSelection.singleObjectiveSurvivorSelector[this.selectedSingleObjectiveSurvivorSelectorIndex];\n    } else {\n      // Multi objective\n      offspringSelector = this.selectedGeneticAlgorithmSelection.multiObjectiveOffspringSelector[this.selectedMultiObjectiveOffspringSelectorIndex];\n      survivorSelector = this.selectedGeneticAlgorithmSelection.multiObjectiveSurvivorSelector[this.selectedMultiObjectiveSurvivorSelectorIndex];\n    }\n    var crossoverType = this.selectedGeneticAlgorithmSelection.crossovers[this.selectedCrossoverIndex];\n    var mutationType = this.selectedGeneticAlgorithmSelection.mutations[this.selectedMutationIndex];\n    var geneticAlgorithmSelectionParameter = new GeneticAlgorithmSelectionParameter(chromosomeEncoding, offspringSelector, survivorSelector, crossoverType, mutationType);\n    var selectedObjectives = this.objectivesDataSource.filter(function (objective) {\n      return objective.isSelected;\n    });\n    var objectiveData = new ObjectiveData(this.numberOfElementsPerModule, this.isUseWeightedSumMethod, selectedObjectives);\n    var isCustomEdgeWeightsSelected = this.isUseCustomEdgeWeights ? this.edgeWeightDataSource.data : null;\n    var conceptualModelParameter = new ConceptualModelParameter(this.getSelectedMetaModel(), this.getSelectedConceptualModel(), isCustomEdgeWeightsSelected, objectiveData);\n    var modulariseConceptualModelDTO = new ModulariseConceptualModelDTO(geneticAlgorithmSelectionParameter, this.geneticAlgorithmParameter, this.paretoSetParameter, this.mutationWeightParameter, conceptualModelParameter, this.modularisationFileToUpload);\n    this.modularisationDataService.sendGetModularisedConceptualRequest(modulariseConceptualModelDTO).subscribe({\n      next: function (response) {\n        _this.promptSaveFileAsDialog(new Blob([response.body], {\n          type: 'application/zip'\n        }));\n      },\n      error: function (error) {\n        console.log(error);\n      }\n    });\n  };\n  ModularisationComponent.prototype.getSelectedMetaModel = function () {\n    var metaModelType;\n    switch (this.selectedMetaModel.label) {\n      case \"Papyrus UML\":\n        {\n          metaModelType = ModelParameter.MetaModelType.PAPYRUSUML;\n          break;\n        }\n      case \"Archi\":\n        {\n          metaModelType = ModelParameter.MetaModelType.ARCHI;\n          break;\n        }\n      case \"ADOxx\":\n        {\n          metaModelType = ModelParameter.MetaModelType.ADOXX;\n          break;\n        }\n    }\n    return metaModelType;\n  };\n  ModularisationComponent.prototype.getSelectedConceptualModel = function () {\n    var conceptualModelType;\n    switch (this.selectedConceptualModel) {\n      case \"UML\":\n        {\n          conceptualModelType = ModelParameter.ConceptualModelType.UML;\n          break;\n        }\n      case \"Archimate\":\n        {\n          conceptualModelType = ModelParameter.ConceptualModelType.ARCHIMATE;\n          break;\n        }\n      case \"EPC\":\n        {\n          conceptualModelType = ModelParameter.ConceptualModelType.EPC;\n          break;\n        }\n      case \"ER\":\n        {\n          conceptualModelType = ModelParameter.ConceptualModelType.ER;\n          break;\n        }\n      case \"OWL\":\n        {\n          conceptualModelType = ModelParameter.ConceptualModelType.OWL;\n          break;\n        }\n    }\n    return conceptualModelType;\n  };\n  ModularisationComponent.prototype.promptSaveFileAsDialog = function (modularisedConceptualModelResponseFileAsBlob) {\n    var nowDateTime = new Date().toLocaleString(\"en-GB\");\n    saveAs(modularisedConceptualModelResponseFileAsBlob, \"\".concat(nowDateTime, \".zip\"));\n  };\n  __decorate([ViewChild('add-edge-weight-name'), __metadata(\"design:type\", ElementRef)], ModularisationComponent.prototype, \"addEdgeWeightTextField\", void 0);\n  ModularisationComponent = __decorate([Component({\n    selector: 'app-modularisation',\n    templateUrl: './modularisation.component.html',\n    styleUrls: ['./modularisation.component.css']\n  }), __metadata(\"design:paramtypes\", [ModularisationDataService, SpinnerService])], ModularisationComponent);\n  return ModularisationComponent;\n}();\nexport { ModularisationComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}