{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { Environment } from 'src/assets/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar ModularisationDataService = /** @class */function () {\n  function ModularisationDataService(httpClient) {\n    this.httpClient = httpClient;\n  }\n  ModularisationDataService.prototype.sendGetModularisedConceptualRequest = function (modulariseConceptualModelDTO) {\n    var formData = this.createFormData(modulariseConceptualModelDTO);\n    var url = Environment.backendUrl;\n    if (this.isGraphMLType(modulariseConceptualModelDTO)) {\n      url += \"apply\";\n    } else if (this.isMetaModelType(modulariseConceptualModelDTO)) {\n      url += \"modularise\";\n    }\n    return this.httpClient.post(url, formData, {\n      observe: 'response',\n      responseType: 'blob'\n    });\n  };\n  ModularisationDataService.prototype.createFormData = function (modulariseConceptualModelDTO) {\n    var formData = new FormData();\n    formData.append('countPopulation', String(modulariseConceptualModelDTO.countPopulation));\n    formData.append('countPopulation', String(modulariseConceptualModelDTO.countPopulation));\n    formData.append('countPopulation', String(modulariseConceptualModelDTO.countPopulation));\n    formData.append('countPopulation', String(modulariseConceptualModelDTO.countPopulation));\n    formData.append('mutationProbability', String(modulariseConceptualModelDTO.mutationProbability));\n    formData.append('crossoverProbability', String(modulariseConceptualModelDTO.crossoverProbability));\n    formData.append('tournamentSize', String(modulariseConceptualModelDTO.tournamentSize));\n    formData.append('countGeneration', String(modulariseConceptualModelDTO.countGeneration));\n    formData.append('convergenceRate', String(modulariseConceptualModelDTO.convergenceRate));\n    formData.append('convergedGeneRate', String(modulariseConceptualModelDTO.convergedGeneRate));\n    formData.append('minimumParetoSetSize', String(modulariseConceptualModelDTO.minimumParetoSetSize));\n    formData.append('maximumParetoSetSize', String(modulariseConceptualModelDTO.maximumParetoSetSize));\n    formData.append('mutationWeight', JSON.stringify(modulariseConceptualModelDTO.mutationWeight));\n    if (this.isMetaModelType(modulariseConceptualModelDTO)) {\n      formData.append('conceptualModelType', modulariseConceptualModelDTO.conceptualModelType);\n      formData.append('metaModelType', String(modulariseConceptualModelDTO.metaModelType));\n      formData.append('metaModelFile', modulariseConceptualModelDTO.conceptualModelFile);\n    } else if (this.isGraphMLType(modulariseConceptualModelDTO)) {\n      formData.append('graphmlFile', modulariseConceptualModelDTO.conceptualModelFile);\n    } else if (this.isAdoxxMetaModelType(modulariseConceptualModelDTO)) {\n      formData.append('adoxxFile', modulariseConceptualModelDTO.conceptualModelFile);\n    }\n    if (modulariseConceptualModelDTO.edgeWeights != null) {\n      formData.append('edgeWeights', JSON.stringify(modulariseConceptualModelDTO.edgeWeights));\n    }\n    formData.append('objectiveData', JSON.stringify(modulariseConceptualModelDTO.objectiveData));\n    return formData;\n  };\n  ModularisationDataService.prototype.isMetaModelType = function (modulariseConceptualModelDTO) {\n    var fileExtension = this.getModularisationFileExtension(modulariseConceptualModelDTO);\n    return fileExtension === \"xml\" || fileExtension === \"archimate\" || fileExtension === \"uml\";\n  };\n  ModularisationDataService.prototype.isGraphMLType = function (modulariseConceptualModelDTO) {\n    var fileExtension = this.getModularisationFileExtension(modulariseConceptualModelDTO);\n    return fileExtension === \"graphml\";\n  };\n  ModularisationDataService.prototype.isAdoxxMetaModelType = function (modulariseConceptualModelDTO) {\n    var fileExtension = this.getModularisationFileExtension(modulariseConceptualModelDTO);\n    return fileExtension === \"xml\";\n  };\n  ModularisationDataService.prototype.getModularisationFileExtension = function (modulariseConceptualModelDTO) {\n    var fileName = modulariseConceptualModelDTO.conceptualModelFile.name;\n    return fileName.split('.').pop();\n  };\n  ModularisationDataService.ɵfac = function ModularisationDataService_Factory(t) {\n    return new (t || ModularisationDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ModularisationDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModularisationDataService,\n    factory: ModularisationDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return ModularisationDataService;\n}();\nexport { ModularisationDataService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}